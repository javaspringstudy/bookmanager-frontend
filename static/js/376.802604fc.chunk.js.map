{"version":3,"file":"static/js/376.802604fc.chunk.js","mappings":"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","sources":["pages/wish/WishList.jsx","components/common/Pagination.jsx","hooks/useCustomMove.js"],"sourcesContent":["import styled from 'styled-components'\r\nimport useCustomLogin from '../../hooks/useCustomLogin'\r\nimport { useEffect, useState } from 'react'\r\nimport useCustomMove from '../../hooks/useCustomMove'\r\nimport Pagination from '../../components/common/Pagination'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst WishContainer = styled.div`\r\n  max-width: 1280px;\r\n  margin: 40px auto;\r\n  padding: 0 16px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow-x: auto;\r\n  background-color: white;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n`\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n\r\n  thead {\r\n    background-color: #f3f4f6;\r\n    color: #374151;\r\n  }\r\n\r\n  th,\r\n  td {\r\n    padding: 12px 16px;\r\n    text-align: left;\r\n    border-bottom: 1px solid #e5e7eb;\r\n  }\r\n\r\n  td button {\r\n    display: inline-block;\r\n    font-size: 13px;\r\n    color: #dc2626;\r\n    border: 1px solid #ef4444;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    background-color: white;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background-color: #fef2f2;\r\n    }\r\n  }\r\n`\r\n\r\nconst WishList = () => {\r\n  const { moveToList } = useCustomMove()\r\n  const [serverData, setServerData] = useState({ list: [] })\r\n\r\n  useEffect(() => {\r\n    //여기에서 비동기로 데이터를 받아올 수 있도록 코드를 작성해 주세요\r\n  }, [])\r\n\r\n  if (!serverData.list || serverData.list.length < 1) {\r\n    return <h2>대여 데이터가 없습니다.</h2>\r\n  }\r\n\r\n  return (\r\n    <WishContainer>\r\n      <TableWrapper>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th>신청일</th>\r\n              <th>신청도서</th>\r\n              <th>저자</th>\r\n              <th>출판사</th>\r\n              <th>처리상태</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>2025-06-15</td>\r\n              <td>\r\n                <Link to={'../1'}>어린왕자와 철학자들</Link>\r\n              </td>\r\n              <td>김철수</td>\r\n              <td>인문출판사</td>\r\n              <td>\r\n                <span style={{ color: '#2563eb', fontWeight: 'bold' }}>\r\n                  검토중\r\n                </span>{' '}\r\n                <button>취소</button>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>2025-06-14</td>\r\n              <td>\r\n                <Link to={'../1'}>과학으로 읽는 어린왕자</Link>\r\n              </td>\r\n              <td>박지현</td>\r\n              <td>지식너머</td>\r\n              <td style={{ color: 'green', fontWeight: 'bold' }}>승인됨</td>\r\n            </tr>\r\n            <tr>\r\n              <td>2025-06-12</td>\r\n              <td>\r\n                <Link to={'../1'}>어린왕자 다시 읽기</Link>\r\n              </td>\r\n              <td>이민호</td>\r\n              <td>문학나무</td>\r\n              <td style={{ color: '#ca8a04', fontWeight: 'bold' }}>구매중</td>\r\n            </tr>\r\n            <tr>\r\n              <td>2025-06-10</td>\r\n              <td>\r\n                <Link to={'../1'}>어린왕자 해설서</Link>\r\n              </td>\r\n              <td>최윤정</td>\r\n              <td>책읽는세상</td>\r\n              <td style={{ color: '#7c3aed', fontWeight: 'bold' }}>입고완료</td>\r\n            </tr>\r\n            <tr>\r\n              <td>2025-06-08</td>\r\n              <td>\r\n                <Link to={'../1'}>어린왕자와 인간관계</Link>\r\n              </td>\r\n              <td>정하늘</td>\r\n              <td>힐링북스</td>\r\n              <td style={{ color: '#dc2626', fontWeight: 'bold' }}>반려됨</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </TableWrapper>\r\n\r\n      <Pagination serverData={serverData} movePage={moveToList} />\r\n    </WishContainer>\r\n  )\r\n}\r\n\r\nexport default WishList\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 32px;\r\n\r\n  button {\r\n    padding: 8px 14px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n\r\n    &:first-child {\r\n      color: white !important;\r\n      font-weight: bold;\r\n      background-color: #3b82f6;\r\n    }\r\n\r\n    &:hover {\r\n      color: white !important;\r\n      background-color: #3b82f6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Pagination = ({ serverData, movePage }) => {\r\n  // console.log('serverData=', serverData)\r\n  let { page, size, totalCount, totalPages } = serverData\r\n\r\n  let endPage = Math.ceil((page + 1) / 10) * 10 // 페이지네이션 끝번호\r\n  const startPage = endPage - 10 + 1 // 페이지네이션 시작번호\r\n  const realEndPage = Math.ceil(totalCount / size)\r\n\r\n  // 페이지네이션 끝번호 재계산\r\n  if (realEndPage < endPage) {\r\n    endPage = realEndPage\r\n  }\r\n\r\n  const pageNumList = []\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pageNumList[i - 1] = i\r\n  }\r\n\r\n  const prev = startPage > 10 ? true : false\r\n  const next = endPage < realEndPage ? true : false\r\n\r\n  return (\r\n    <Container>\r\n      {prev ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: startPage - 1,\r\n              size,\r\n            })\r\n          }\r\n        >\r\n          Prev\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {pageNumList.map((pageNum, idx) => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => movePage({ page: pageNum, size })}\r\n          key={idx}\r\n          style={{\r\n            color: `${page + 1 === pageNum ? 'red' : 'black'}`,\r\n          }}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {next ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: endPage + 1,\r\n              size: size,\r\n            })\r\n          }\r\n        >\r\n          Next\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import { useState } from 'react'\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from 'react-router-dom'\r\n\r\nconst useCustomMove = () => {\r\n  //문자열을 정수로 변환\r\n  const getNum = (strNum, defaultValue) => {\r\n    if (!strNum) return defaultValue\r\n    return parseInt(strNum)\r\n  }\r\n\r\n  const [searchParam] = useSearchParams()\r\n  const page = getNum(searchParam.get('page'), 1)\r\n  const size = getNum(searchParam.get('size'), 10)\r\n\r\n  const queryDefault = createSearchParams({ page, size }).toString()\r\n\r\n  const navigate = useNavigate()\r\n  let queryString = ''\r\n\r\n  //현재페이지번호를 클릭해도 서버에 데이터를 요청하기 위한 상태변수\r\n  const [setRefresh] = useState(false)\r\n\r\n  const moveToList = (pageParam) => {\r\n    if (pageParam) {\r\n      const pageNum = getNum(pageParam.page, 1)\r\n      const sizeNum = getNum(pageParam.size, 10)\r\n      queryString = createSearchParams({\r\n        page: pageNum,\r\n        size: sizeNum,\r\n      }).toString()\r\n    } else {\r\n      navigate({ pathname: '../search' })\r\n      //../search는 현재 경로에서 한 디렉터리 위로 올라간 다음 list로 이동하는 의미. 결과: /books/search\r\n    }\r\n    setRefresh((prev) => !prev)\r\n    navigate({ pathname: '../search', search: queryString })\r\n  }\r\n\r\n  const moveToRead = (bookId) => {\r\n    navigate({ pathname: `../info/${bookId}`, search: queryDefault })\r\n  }\r\n\r\n  // console.log('page=', page)\r\n  // console.log('size=', size)\r\n\r\n  return { moveToList, moveToRead, page, size }\r\n}\r\n\r\nexport default useCustomMove\r\n"],"names":["WishContainer","styled","div","_templateObject","_taggedTemplateLiteral","TableWrapper","_templateObject2","Table","table","_templateObject3","WishList","moveToList","useCustomMove","serverData","setServerData","useState","list","useEffect","length","_jsx","children","_jsxs","Link","to","style","color","fontWeight","Pagination","movePage","Container","_ref","page","size","totalCount","totalPages","endPage","Math","ceil","startPage","realEndPage","pageNumList","i","prev","next","onClick","map","pageNum","idx","type","concat","getNum","strNum","defaultValue","parseInt","searchParam","useSearchParams","get","queryDefault","createSearchParams","toString","navigate","useNavigate","queryString","setRefresh","pageParam","sizeNum","pathname","search","moveToRead","bookId"],"sourceRoot":""}