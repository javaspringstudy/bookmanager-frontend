{"version":3,"file":"static/js/122.42b4f715.chunk.js","mappings":"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","sources":["components/common/Pagination.jsx","hooks/useCustomMove.js","pages/books/SearchPage.jsx","api/books/bookApi.js"],"sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 32px;\r\n\r\n  button {\r\n    padding: 8px 14px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n\r\n    &:first-child {\r\n      color: white !important;\r\n      font-weight: bold;\r\n      background-color: #3b82f6;\r\n    }\r\n\r\n    &:hover {\r\n      color: white !important;\r\n      background-color: #3b82f6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Pagination = ({ serverData, movePage }) => {\r\n  console.log('serverData=', serverData)\r\n  let { page, size, totalCount, totalPages } = serverData\r\n\r\n  let endPage = Math.ceil((page + 1) / 10) * 10 // 페이지네이션 끝번호\r\n  const startPage = endPage - 10 + 1 // 페이지네이션 시작번호\r\n  const realEndPage = Math.ceil(totalCount / size)\r\n\r\n  // 페이지네이션 끝번호 재계산\r\n  if (realEndPage < endPage) {\r\n    endPage = realEndPage\r\n  }\r\n\r\n  const pageNumList = []\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pageNumList[i - 1] = i\r\n  }\r\n\r\n  const prev = startPage > 10 ? true : false\r\n  const next = endPage < realEndPage ? true : false\r\n\r\n  return (\r\n    <Container>\r\n      {prev ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: startPage - 1,\r\n              size,\r\n            })\r\n          }\r\n        >\r\n          Prev\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {pageNumList.map((pageNum, idx) => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => movePage({ page: pageNum, size })}\r\n          key={idx}\r\n          style={{\r\n            color: `${page + 1 === pageNum ? 'red' : 'black'}`,\r\n          }}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {next ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: endPage + 1,\r\n              size: size,\r\n            })\r\n          }\r\n        >\r\n          Next\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import { useState } from 'react'\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from 'react-router-dom'\r\n\r\nconst useCustomMove = () => {\r\n  //문자열을 정수로 변환\r\n  const getNum = (strNum, defaultValue) => {\r\n    if (!strNum) return defaultValue\r\n    return parseInt(strNum)\r\n  }\r\n\r\n  const [searchParam, setSearchParam] = useSearchParams()\r\n  const page = getNum(searchParam.get('page'), 1)\r\n  const size = getNum(searchParam.get('size'), 10)\r\n\r\n  const queryDefault = createSearchParams({ page, size }).toString()\r\n\r\n  const navigate = useNavigate()\r\n  let queryString = ''\r\n\r\n  //현재페이지번호를 클릭해도 서버에 데이터를 요청하기 위한 상태변수\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const moveToList = (pageParam) => {\r\n    if (pageParam) {\r\n      const pageNum = getNum(pageParam.page, 1)\r\n      const sizeNum = getNum(pageParam.size, 10)\r\n      queryString = createSearchParams({\r\n        page: pageNum,\r\n        size: sizeNum,\r\n      }).toString()\r\n    } else {\r\n      navigate({ pathname: '../search' })\r\n      //../search는 현재 경로에서 한 디렉터리 위로 올라간 다음 list로 이동하는 의미. 결과: /books/search\r\n    }\r\n    setRefresh((prev) => !prev)\r\n    navigate({ pathname: '../search', search: queryString })\r\n  }\r\n\r\n  const moveToRead = (bookId) => {\r\n    navigate({ pathname: `../info/${bookId}`, search: queryDefault })\r\n  }\r\n\r\n  // console.log('page=', page)\r\n  // console.log('size=', size)\r\n\r\n  return { moveToList, moveToRead, page, size }\r\n}\r\n\r\nexport default useCustomMove\r\n","import { useEffect, useState } from 'react'\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { searchBook } from '../../api/books/bookApi'\r\nimport Pagination from '../../components/common/Pagination'\r\nimport useCustomMove from '../../hooks/useCustomMove'\r\n\r\nconst initData = [\r\n  {\r\n    id: 1,\r\n    title: '어린왕자의 철학',\r\n    author: '정철',\r\n    publisher: '철학의숲',\r\n    img: 'https://picsum.photos/seed/1/200/280',\r\n  },\r\n  {\r\n    id: 2,\r\n    title: '다시 만난 어린왕자',\r\n    author: '김민정',\r\n    publisher: '문학사랑',\r\n    img: 'https://picsum.photos/seed/2/200/280',\r\n  },\r\n  {\r\n    id: 3,\r\n    title: '어린왕자와 함께하는 하루',\r\n    author: '이준',\r\n    publisher: '하루북스',\r\n    img: 'https://picsum.photos/seed/3/200/280',\r\n  },\r\n  {\r\n    id: 4,\r\n    title: '어린왕자의 편지',\r\n    author: '송지현',\r\n    publisher: '편지출판',\r\n    img: 'https://picsum.photos/seed/4/200/280',\r\n  },\r\n  {\r\n    id: 5,\r\n    title: '어린왕자와 떠나는 여행',\r\n    author: '홍길동',\r\n    publisher: '여행의길',\r\n    img: 'https://picsum.photos/seed/5/200/280',\r\n  },\r\n  {\r\n    id: 6,\r\n    title: '어린왕자의 지구일기',\r\n    author: '박은영',\r\n    publisher: '별책출판',\r\n    img: 'https://picsum.photos/seed/6/200/280',\r\n  },\r\n  {\r\n    id: 7,\r\n    title: '어린왕자 그리고 장미',\r\n    author: '최성훈',\r\n    publisher: '플로라북스',\r\n    img: 'https://picsum.photos/seed/7/200/280',\r\n  },\r\n  {\r\n    id: 8,\r\n    title: '어린왕자, 별을 걷다',\r\n    author: '이아름',\r\n    publisher: '은하수출판사',\r\n    img: 'https://picsum.photos/seed/8/200/280',\r\n  },\r\n]\r\n\r\nconst ArticleContainer = styled.article`\r\n  margin-top: 48px;\r\n  .title {\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  .highlight {\r\n    color: #2563eb;\r\n  }\r\n`\r\n\r\nconst BookGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, minmax(180px, 1fr));\r\n  gap: 48px 96px;\r\n`\r\n\r\nconst BookCard = styled.div`\r\n  background-color: white;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n    aspect-ratio: 3 / 4;\r\n    object-fit: cover;\r\n    border-radius: 4px;\r\n    margin-bottom: 12px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1rem;\r\n    font-weight: 600;\r\n    margin-bottom: 6px;\r\n  }\r\n\r\n  p {\r\n    font-size: 0.875rem;\r\n    color: #555;\r\n  }\r\n`\r\n\r\nconst SearchPage = () => {\r\n  const [searchParams] = useSearchParams()\r\n  const type = searchParams.get('type')\r\n  const keyword = searchParams.get('keyword')\r\n\r\n  // const [books, setBooks] = useState([])\r\n  const [serverData, setServerData] = useState({ books: [] })\r\n  const { moveToList, moveToRead, page, size, refresh } = useCustomMove()\r\n\r\n  useEffect(() => {\r\n    if (!keyword) return\r\n    const params = { type, keyword }\r\n\r\n    //서버요청\r\n    searchBook(params).then((data) => {\r\n      // setBooks(data.books)\r\n      setServerData(data)\r\n    })\r\n  }, [type, keyword])\r\n\r\n  useEffect(() => {\r\n    console.log('북스=', serverData.books)\r\n  }, [serverData])\r\n\r\n  const navigate = useNavigate()\r\n  const queryString = createSearchParams({ page, size }).toString()\r\n\r\n  return (\r\n    <ArticleContainer>\r\n      <BookGrid>\r\n        {serverData.books.map((book) => (\r\n          <BookCard\r\n            key={book.bookId}\r\n            onClick={() =>\r\n              navigate({\r\n                pathname: `../${book.bookId}`,\r\n                search: queryString,\r\n              })\r\n            }\r\n          >\r\n            {/* <Link to={{ pathname: '../info', state: { bookId: book.bookId } }}> */}\r\n            <img src={book.cover} alt={book.title} />\r\n            <h3>{book.title}</h3>\r\n            <p>\r\n              {book.author} | {book.publisher}\r\n            </p>\r\n            {/* </Link> */}\r\n          </BookCard>\r\n        ))}\r\n      </BookGrid>\r\n\r\n      <Pagination serverData={serverData} movePage={moveToList} />\r\n    </ArticleContainer>\r\n  )\r\n}\r\n\r\nexport default SearchPage\r\n","import axios from 'axios'\r\n\r\nexport const API_SERVER_HOST = 'http://localhost:8080'\r\nconst uriBooks = `${API_SERVER_HOST}/api/v1/books`\r\n\r\n//대여신청(인증필요)\r\nexport const rentBook = async (bookId) => {}\r\n\r\n//책정보\r\nexport const bookInfo = async (bookId) => {\r\n  try {\r\n    const res = await axios.get(`${uriBooks}/${bookId}`)\r\n    return res\r\n  } catch (err) {\r\n    console.error('latestBook error:', err)\r\n    return { books: [] }\r\n  }\r\n}\r\n\r\n//신규도서\r\nexport const latestBook = async () => {\r\n  try {\r\n    const res = await axios.get(`${uriBooks}/latest`)\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('latestBook error:', err)\r\n    return { books: [] }\r\n  }\r\n}\r\n\r\n//도서검색\r\nexport const searchBook = async (obj) => {\r\n  if (!obj) {\r\n    console.warn('데이터의 상태가 비정상적입니다.')\r\n    return { books: [] }\r\n  }\r\n\r\n  const key = obj.type\r\n  const value = obj.keyword\r\n\r\n  try {\r\n    const res = await axios.get(`${uriBooks}/search`, {\r\n      params: { [key]: value },\r\n    })\r\n\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('searchBook error:', err)\r\n    return { books: [] }\r\n  }\r\n}\r\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","serverData","movePage","console","log","page","size","totalCount","totalPages","endPage","Math","ceil","startPage","realEndPage","pageNumList","i","prev","next","_jsxs","children","_jsx","onClick","map","pageNum","idx","type","style","color","concat","useCustomMove","getNum","strNum","defaultValue","parseInt","searchParam","setSearchParam","useSearchParams","get","queryDefault","createSearchParams","toString","navigate","useNavigate","queryString","refresh","setRefresh","useState","moveToList","pageParam","sizeNum","pathname","search","moveToRead","bookId","ArticleContainer","article","BookGrid","_templateObject2","BookCard","_templateObject3","SearchPage","searchParams","keyword","setServerData","books","useEffect","params","searchBook","then","data","book","src","cover","alt","title","author","publisher","Pagination","uriBooks","bookInfo","async","axios","err","error","latestBook","obj","warn","key","value"],"sourceRoot":""}