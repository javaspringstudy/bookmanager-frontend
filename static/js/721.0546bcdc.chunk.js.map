{"version":3,"file":"static/js/721.0546bcdc.chunk.js","mappings":"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","sources":["components/common/Pagination.jsx","hooks/useCustomMove.js","api/notice/noticeApi.js","pages/cs/NoticePage.jsx","components/common/NoContent.jsx"],"sourcesContent":["import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 32px;\r\n\r\n  button {\r\n    padding: 8px 14px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n\r\n    &:first-child {\r\n      color: white !important;\r\n      font-weight: bold;\r\n      background-color: #3b82f6;\r\n    }\r\n\r\n    &:hover {\r\n      color: white !important;\r\n      background-color: #3b82f6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Pagination = ({ serverData, movePage }) => {\r\n  // console.log('serverData=', serverData)\r\n  let { page, size, totalCount, totalPages } = serverData\r\n\r\n  let endPage = Math.ceil((page + 1) / 10) * 10 // 페이지네이션 끝번호\r\n  const startPage = endPage - 10 + 1 // 페이지네이션 시작번호\r\n  const realEndPage = Math.ceil(totalCount / size)\r\n\r\n  // 페이지네이션 끝번호 재계산\r\n  if (realEndPage < endPage) {\r\n    endPage = realEndPage\r\n  }\r\n\r\n  const pageNumList = []\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pageNumList[i - 1] = i\r\n  }\r\n\r\n  const prev = startPage > 10 ? true : false\r\n  const next = endPage < realEndPage ? true : false\r\n\r\n  return (\r\n    <Container>\r\n      {prev ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: startPage - 1,\r\n              size,\r\n            })\r\n          }\r\n        >\r\n          Prev\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {pageNumList.map((pageNum, idx) => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => movePage({ page: pageNum, size })}\r\n          key={idx}\r\n          style={{\r\n            color: `${page + 1 === pageNum ? 'red' : 'black'}`,\r\n          }}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {next ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: endPage + 1,\r\n              size: size,\r\n            })\r\n          }\r\n        >\r\n          Next\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import { useState } from 'react'\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from 'react-router-dom'\r\n\r\nconst useCustomMove = () => {\r\n  //문자열을 정수로 변환\r\n  const getNum = (strNum, defaultValue) => {\r\n    if (!strNum) return defaultValue\r\n    return parseInt(strNum)\r\n  }\r\n\r\n  const [searchParam] = useSearchParams()\r\n  const page = getNum(searchParam.get('page'), 1)\r\n  const size = getNum(searchParam.get('size'), 10)\r\n\r\n  const queryDefault = createSearchParams({ page, size }).toString()\r\n\r\n  const navigate = useNavigate()\r\n  let queryString = ''\r\n\r\n  //현재페이지번호를 클릭해도 서버에 데이터를 요청하기 위한 상태변수\r\n  const [setRefresh] = useState(false)\r\n\r\n  const moveToList = (pageParam) => {\r\n    if (pageParam) {\r\n      const pageNum = getNum(pageParam.page, 1)\r\n      const sizeNum = getNum(pageParam.size, 10)\r\n      queryString = createSearchParams({\r\n        page: pageNum,\r\n        size: sizeNum,\r\n      }).toString()\r\n    } else {\r\n      navigate({ pathname: '../search' })\r\n      //../search는 현재 경로에서 한 디렉터리 위로 올라간 다음 list로 이동하는 의미. 결과: /books/search\r\n    }\r\n    setRefresh((prev) => !prev)\r\n    navigate({ pathname: '../search', search: queryString })\r\n  }\r\n\r\n  const moveToRead = (bookId) => {\r\n    navigate({ pathname: `../info/${bookId}`, search: queryDefault })\r\n  }\r\n\r\n  // console.log('page=', page)\r\n  // console.log('size=', size)\r\n\r\n  return { moveToList, moveToRead, page, size }\r\n}\r\n\r\nexport default useCustomMove\r\n","import axios from 'axios'\r\nimport { API_SERVER_HOST } from '../books/bookApi' //'http://localhost:8080'\r\n\r\nconst uriNotice = `${API_SERVER_HOST}/api/notice`\r\n\r\n//공지목록\r\nexport const noticeList = async () => {\r\n  try {\r\n    const token = localStorage.getItem('accessToken') // 저장 방식에 따라 다름\r\n    const res = await axios.get(`${uriNotice}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      withCredentials: true, // 토큰도 같이 전송하려면 필요\r\n    })\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('noticeList error:', err)\r\n    return { notice: [] }\r\n  }\r\n}\r\n\r\n//개별공지글\r\nexport const noticeCont = async (noticeId) => {\r\n  try {\r\n    const res = await axios.get(`${uriNotice}/${noticeId}`)\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('noticeCont error:', err)\r\n    return { data: {} }\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { noticeList } from '../../api/notice/noticeApi'\r\nimport { Link } from 'react-router-dom'\r\nimport Pagination from '../../components/common/Pagination'\r\nimport useCustomMove from '../../hooks/useCustomMove'\r\nimport NoContent from '../../components/common/NoContent'\r\n\r\nconst TableWrapper = styled.div`\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n`\r\n\r\nconst NoticeTable = styled.table`\r\n  width: 100%;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  border-collapse: collapse;\r\n`\r\n\r\nconst Thead = styled.thead`\r\n  background-color: #f3f4f6;\r\n  color: #374151;\r\n  font-size: 16px;\r\n\r\n  th {\r\n    padding: 12px 16px;\r\n  }\r\n`\r\n\r\nconst Tbody = styled.tbody`\r\n  color: #1f2937;\r\n\r\n  tr {\r\n    border-top: 1px solid #e5e7eb;\r\n  }\r\n\r\n  td {\r\n    padding: 12px 16px;\r\n    text-align: center;\r\n  }\r\n\r\n  .text-left {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst NoticeItem = ({\r\n  num,\r\n  noticeId,\r\n  title,\r\n  content,\r\n  createdAt,\r\n  type,\r\n  adminId,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>{num}</td>\r\n      <td className=\"text-left\">\r\n        <Link to={`${noticeId}`}>{title}</Link>\r\n      </td>\r\n      <td>{adminId && '관리자'}</td>\r\n      <td>{type && '일반'}</td>\r\n      <td>{createdAt.slice(0, 10)}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst NoticePage = () => {\r\n  const { moveToList } = useCustomMove()\r\n  const [serverData, setServerData] = useState({})\r\n\r\n  useEffect(() => {\r\n    noticeList().then((data) => {\r\n      setServerData(data)\r\n    })\r\n  }, [])\r\n\r\n  if (!serverData.notices || serverData.notices.length < 1) {\r\n    return <NoContent msg={`등록된 공지사항이 없습니다.`} />\r\n  }\r\n  return (\r\n    <>\r\n      <TableWrapper>\r\n        <NoticeTable>\r\n          <Thead>\r\n            <tr>\r\n              <th>번호</th>\r\n              <th>제목</th>\r\n              <th>작성자</th>\r\n              <th>종류</th>\r\n              <th>작성일</th>\r\n            </tr>\r\n          </Thead>\r\n\r\n          <Tbody>\r\n            {serverData.notices.map((n, idx) => (\r\n              <NoticeItem\r\n                noticeId={n.noticeId}\r\n                title={n.title}\r\n                content={n.content}\r\n                createdAt={n.createdAt}\r\n                type={n.type}\r\n                adminId={n.adminId}\r\n                key={n.noticeId}\r\n                num={idx + 1}\r\n              />\r\n            ))}\r\n          </Tbody>\r\n        </NoticeTable>\r\n      </TableWrapper>\r\n\r\n      <Pagination serverData={serverData} movePage={moveToList} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NoticePage\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.article`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 64px;\r\n`\r\n\r\nconst NoContent = ({ msg }) => {\r\n  return (\r\n    <Container>\r\n      <h3>{msg}</h3>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default NoContent\r\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","serverData","movePage","page","size","totalCount","totalPages","endPage","Math","ceil","startPage","realEndPage","pageNumList","i","prev","next","_jsxs","children","_jsx","onClick","map","pageNum","idx","type","style","color","concat","useCustomMove","getNum","strNum","defaultValue","parseInt","searchParam","useSearchParams","get","queryDefault","createSearchParams","toString","navigate","useNavigate","queryString","setRefresh","useState","moveToList","pageParam","sizeNum","pathname","search","moveToRead","bookId","uriNotice","API_SERVER_HOST","noticeList","async","token","localStorage","getItem","axios","headers","Authorization","withCredentials","data","err","console","error","notice","noticeCont","noticeId","TableWrapper","NoticeTable","table","_templateObject2","Thead","thead","_templateObject3","Tbody","tbody","_templateObject4","NoticeItem","num","title","content","createdAt","adminId","className","Link","to","slice","NoticePage","setServerData","useEffect","then","notices","length","NoContent","msg","_Fragment","n","Pagination","article"],"sourceRoot":""}