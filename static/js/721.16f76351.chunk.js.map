{"version":3,"file":"static/js/721.16f76351.chunk.js","mappings":"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","sources":["api/notice/noticeApi.js","components/common/Pagination.jsx","components/common/NoContent.jsx","hooks/useCustomMove.js","pages/cs/NoticePage.jsx"],"sourcesContent":["import axios from 'axios'\r\n\r\nexport const API_SERVER_HOST = 'http://localhost:8080'\r\nconst uriNotice = `${API_SERVER_HOST}/api/notice`\r\n\r\n//공지목록\r\nexport const noticeList = async () => {\r\n  try {\r\n    const res = await axios.get(`${uriNotice}`)\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('noticeList error:', err)\r\n    return { notice: [] }\r\n  }\r\n}\r\n\r\n//개별공지글\r\nexport const noticeCont = async (noticeId) => {\r\n  try {\r\n    const res = await axios.get(`${uriNotice}/${noticeId}`)\r\n    return res.data\r\n  } catch (err) {\r\n    console.error('noticeCont error:', err)\r\n    return { data: {} }\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 32px;\r\n\r\n  button {\r\n    padding: 8px 14px;\r\n    background-color: white;\r\n    border: 1px solid #ddd;\r\n    border-radius: 6px;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n\r\n    &:first-child {\r\n      color: white !important;\r\n      font-weight: bold;\r\n      background-color: #3b82f6;\r\n    }\r\n\r\n    &:hover {\r\n      color: white !important;\r\n      background-color: #3b82f6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Pagination = ({ serverData, movePage }) => {\r\n  // console.log('serverData=', serverData)\r\n  let { page, size, totalCount, totalPages } = serverData\r\n\r\n  let endPage = Math.ceil((page + 1) / 10) * 10 // 페이지네이션 끝번호\r\n  const startPage = endPage - 10 + 1 // 페이지네이션 시작번호\r\n  const realEndPage = Math.ceil(totalCount / size)\r\n\r\n  // 페이지네이션 끝번호 재계산\r\n  if (realEndPage < endPage) {\r\n    endPage = realEndPage\r\n  }\r\n\r\n  const pageNumList = []\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pageNumList[i - 1] = i\r\n  }\r\n\r\n  const prev = startPage > 10 ? true : false\r\n  const next = endPage < realEndPage ? true : false\r\n\r\n  return (\r\n    <Container>\r\n      {prev ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: startPage - 1,\r\n              size,\r\n            })\r\n          }\r\n        >\r\n          Prev\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n\r\n      {pageNumList.map((pageNum, idx) => (\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => movePage({ page: pageNum, size })}\r\n          key={idx}\r\n          style={{\r\n            color: `${page + 1 === pageNum ? 'red' : 'black'}`,\r\n          }}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      ))}\r\n\r\n      {next ? (\r\n        <span\r\n          onClick={() =>\r\n            movePage({\r\n              page: endPage + 1,\r\n              size: size,\r\n            })\r\n          }\r\n        >\r\n          Next\r\n        </span>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.article`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 64px;\r\n`\r\n\r\nconst NoContent = ({ msg }) => {\r\n  return (\r\n    <Container>\r\n      <h3>{msg}</h3>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default NoContent\r\n","import { useState } from 'react'\r\nimport {\r\n  createSearchParams,\r\n  useNavigate,\r\n  useSearchParams,\r\n} from 'react-router-dom'\r\n\r\nconst useCustomMove = () => {\r\n  //문자열을 정수로 변환\r\n  const getNum = (strNum, defaultValue) => {\r\n    if (!strNum) return defaultValue\r\n    return parseInt(strNum)\r\n  }\r\n\r\n  const [searchParam, setSearchParam] = useSearchParams()\r\n  const page = getNum(searchParam.get('page'), 1)\r\n  const size = getNum(searchParam.get('size'), 10)\r\n\r\n  const queryDefault = createSearchParams({ page, size }).toString()\r\n\r\n  const navigate = useNavigate()\r\n  let queryString = ''\r\n\r\n  //현재페이지번호를 클릭해도 서버에 데이터를 요청하기 위한 상태변수\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const moveToList = (pageParam) => {\r\n    if (pageParam) {\r\n      const pageNum = getNum(pageParam.page, 1)\r\n      const sizeNum = getNum(pageParam.size, 10)\r\n      queryString = createSearchParams({\r\n        page: pageNum,\r\n        size: sizeNum,\r\n      }).toString()\r\n    } else {\r\n      navigate({ pathname: '../search' })\r\n      //../search는 현재 경로에서 한 디렉터리 위로 올라간 다음 list로 이동하는 의미. 결과: /books/search\r\n    }\r\n    setRefresh((prev) => !prev)\r\n    navigate({ pathname: '../search', search: queryString })\r\n  }\r\n\r\n  const moveToRead = (bookId) => {\r\n    navigate({ pathname: `../info/${bookId}`, search: queryDefault })\r\n  }\r\n\r\n  // console.log('page=', page)\r\n  // console.log('size=', size)\r\n\r\n  return { moveToList, moveToRead, page, size }\r\n}\r\n\r\nexport default useCustomMove\r\n","import { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { noticeList } from '../../api/notice/noticeApi'\r\nimport { Link } from 'react-router-dom'\r\nimport Pagination from '../../components/common/Pagination'\r\nimport useCustomMove from '../../hooks/useCustomMove'\r\nimport NoContent from '../../components/common/NoContent'\r\n\r\nconst TableWrapper = styled.div`\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n`\r\n\r\nconst NoticeTable = styled.table`\r\n  width: 100%;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  border-collapse: collapse;\r\n`\r\n\r\nconst Thead = styled.thead`\r\n  background-color: #f3f4f6;\r\n  color: #374151;\r\n  font-size: 16px;\r\n\r\n  th {\r\n    padding: 12px 16px;\r\n  }\r\n`\r\n\r\nconst Tbody = styled.tbody`\r\n  color: #1f2937;\r\n\r\n  tr {\r\n    border-top: 1px solid #e5e7eb;\r\n  }\r\n\r\n  td {\r\n    padding: 12px 16px;\r\n    text-align: center;\r\n  }\r\n\r\n  .text-left {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst NoticeItem = ({\r\n  num,\r\n  noticeId,\r\n  title,\r\n  content,\r\n  createdAt,\r\n  type,\r\n  adminId,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>{num}</td>\r\n      <td className=\"text-left\">\r\n        <Link to={`${noticeId}`}>{title}</Link>\r\n      </td>\r\n      <td>{adminId && '관리자'}</td>\r\n      <td>{type && '일반'}</td>\r\n      <td>{createdAt.slice(0, 10)}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst NoticePage = () => {\r\n  const { moveToList } = useCustomMove()\r\n  const [serverData, setServerData] = useState({})\r\n\r\n  useEffect(() => {\r\n    noticeList().then((data) => {\r\n      setServerData(data)\r\n    })\r\n  }, [])\r\n\r\n  if (!serverData.notices || serverData.notices.length < 1) {\r\n    return <NoContent msg={`등록된 공지사항이 없습니다.`} />\r\n  }\r\n  return (\r\n    <>\r\n      <TableWrapper>\r\n        <NoticeTable>\r\n          <Thead>\r\n            <tr>\r\n              <th>번호</th>\r\n              <th>제목</th>\r\n              <th>작성자</th>\r\n              <th>종류</th>\r\n              <th>작성일</th>\r\n            </tr>\r\n          </Thead>\r\n\r\n          <Tbody>\r\n            {serverData.notices.map((n, idx) => (\r\n              <NoticeItem\r\n                noticeId={n.noticeId}\r\n                title={n.title}\r\n                content={n.content}\r\n                createdAt={n.createdAt}\r\n                type={n.type}\r\n                adminId={n.adminId}\r\n                key={n.noticeId}\r\n                num={idx + 1}\r\n              />\r\n            ))}\r\n          </Tbody>\r\n        </NoticeTable>\r\n      </TableWrapper>\r\n\r\n      <Pagination serverData={serverData} movePage={moveToList} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NoticePage\r\n"],"names":["uriNotice","concat","noticeList","async","axios","get","data","err","console","error","notice","noticeCont","noticeId","Container","styled","div","_templateObject","_taggedTemplateLiteral","_ref","serverData","movePage","page","size","totalCount","totalPages","endPage","Math","ceil","startPage","realEndPage","pageNumList","i","prev","next","_jsxs","children","_jsx","onClick","map","pageNum","idx","type","style","color","article","msg","useCustomMove","getNum","strNum","defaultValue","parseInt","searchParam","setSearchParam","useSearchParams","queryDefault","createSearchParams","toString","navigate","useNavigate","queryString","refresh","setRefresh","useState","moveToList","pageParam","sizeNum","pathname","search","moveToRead","bookId","TableWrapper","NoticeTable","table","_templateObject2","Thead","thead","_templateObject3","Tbody","tbody","_templateObject4","NoticeItem","num","title","content","createdAt","adminId","className","Link","to","slice","NoticePage","setServerData","useEffect","then","notices","length","NoContent","_Fragment","n","Pagination"],"sourceRoot":""}